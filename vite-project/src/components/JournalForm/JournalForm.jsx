import styles from './JournalForm.module.css';
import Button from '../Button/Button';
import { useEffect, useReducer } from 'react';
import cn from 'classnames';
import { INITIAL_STATE, formReducer } from './state/JournalForm.state';

function JournalForm({ onSubmit }) {

	// const INITIAL_STATE = {
	// 	title: true,
	// 	post: true,
	// 	date: true
	// };
	// const [formValidState, setFormValidState] = useState(INITIAL_STATE);

	const [formState, dispatchForm] = useReducer(formReducer, INITIAL_STATE);
	const { isValid, isFormReadyToSubmit, values } = formState;


	useEffect(() => {
		// console.log('–ú–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ');
		let timerId;
		if (!isValid.title || !isValid.post || !isValid.date) {
			timerId = setTimeout(() => {
				dispatchForm({ type: 'RESET_VALIDITY' });

				// setFormValidState(INITIAL_STATE);
			}, 2000);
		}
		// console.log('üöÄ ~ –ü—Ä–∏—Å–≤–∞–µ–º–∞–µ–º ID —Ç–∞–π–º–µ—Ä—É —á—Ç–æ–±—ã –ø–æ—Ç–æ–º —É–¥–∞–ª–∏—Ç—å:', timerId);

		return () => {
			// console.log('–†–∞–∑–º–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ, –æ—á–∏—Å—Ç–∫–∞');
			clearTimeout(timerId);
		};


		//–ö–∞–∫ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —Ä–∞–∑–º–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –æ—á–∏—Å—Ç–∫–∞ –∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
		// –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –ú–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞, –¥–∞–ª–µ–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –æ—á–∏—Å—Ç–∫–∞ 1 –æ—Ç–∫—Ä—ã—Ç–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
		// –ú—ã –Ω–∞–∂–∞–ª–∏ –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —É –Ω–∞—Å —Å—Ä–∞–±–æ—Ç–∞–ª —ç—Ñ—Ñ–µ–∫—Ç –ù–û –û–ù –°–ù–ê–ß–ê–ê–õ–ê –ó–ê–ô–î–ï–¢ –í –û–ß–ò–°–¢–ö–£ –≠–§–§–ï–ö–¢–ê –ê –ü–û–¢–û–ú –ë–£–î–ï–¢ –¢–û–õ–¨–ö–û –í–´–ü–û–õ–ù–Ø–¢–¨ –ü–û–°–¢–†–û–ß–ù–´–ô –ö–û–î –°–í–ï–†–•–£ –í–ù–ò–ó

	}, [isValid]);


	useEffect(() => {
		if (isFormReadyToSubmit) {
			onSubmit(values);
		}

	}, [isFormReadyToSubmit]);



	const addJournalItem = (e) => {
		e.preventDefault();
		const formData = new FormData(e.target);
		const formProps = Object.fromEntries(formData);
		// let isFormValid = true;
		// if (!formProps.title?.trim().length) {
		// 	setFormValidState(state => ({ ...state, title: false }));
		// 	isFormValid = false;
		// } else {
		// 	setFormValidState(state => ({ ...state, title: true }));
		// }
		// if (!formProps.post?.trim().length) {
		// 	setFormValidState(state => ({ ...state, post: false }));
		// 	isFormValid = false;
		// } else {
		// 	setFormValidState(state => ({ ...state, post: true }));
		// }
		// if (!formProps.date) {
		// 	setFormValidState(state => ({ ...state, date: false }));
		// 	isFormValid = false;
		// } else {
		// 	setFormValidState(state => ({ ...state, date: true }));
		// }
		// if (!isFormValid) {
		// 	return;
		// }



		dispatchForm({ type: 'SUBMIT', payload: formProps });
	};

	return (
		<form className={styles['journal-form']} onSubmit={addJournalItem}>
			<div>
				<input type='text' name='title' className={cn(styles['input-title'], {
					[styles['invalid']]: !isValid.title
				})} />
			</div>
			<div className={styles['form-row']}>
				<label htmlFor="date" className={styles['form-label']}>
					<img src='/calendar.svg' alt='–ò–∫–æ–Ω–∫–∞ –∫–∞–ª–µ–Ω–¥–∞—Ä—è' />
					<span>–î–∞—Ç–∞</span>
				</label>
				<input type='date' name='date' id="date" className={cn(styles['input'], {
					[styles['invalid']]: !isValid.date
				})} />
			</div>
			<div className={styles['form-row']}>
				<label htmlFor="tag" className={styles['form-label']}>
					<img src='/folder.svg' alt='–ò–∫–æ–Ω–∫–∞ –ø–∞–ø–∫–∏' />
					<span>–ú–µ—Ç–∫–∏</span>
				</label>
				<input type='text' id="tag" name='tag' className={styles['input']} />
			</div>

			<textarea name="post" id="" cols="30" rows="10" className={cn(styles['input'], {
				[styles['invalid']]: !isValid.post
			})}></textarea>
			<Button text="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å" />
		</form>
	);
}

export default JournalForm;